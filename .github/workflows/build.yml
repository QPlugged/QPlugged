name: Build

on:
    push:
        branches: ["main"]
    pull_request:

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Set up Rust toolchain
              id: rust-toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Use Corepack
              run: corepack enable

            - name: Get Yarn cache directory path
              if: runner.os != 'Windows'
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Get Yarn cache directory path (Windows)
              if: runner.os == 'Windows'
              id: yarn-cache-dir-path-win
              run: echo "dir=$(yarn config get cacheFolder)" >> $env:GITHUB_OUTPUT

            - name: Cache Yarn dependencies
              if: runner.os != 'Windows'
              uses: actions/cache@v3
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Cache Yarn dependencies (Windows)
              if: runner.os == 'Windows'
              uses: actions/cache@v3
              with:
                  path: ${{ steps.yarn-cache-dir-path-win.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Cache Cargo dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      src-tauri/target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ steps.rust-toolchain.outputs.cachekey }}

            - name: Install Linux dependencies
              if: runner.os == 'Linux'
              run: |
                  sudo apt update
                  sudo apt install libwebkit2gtk-4.1-dev \
                    build-essential \
                    curl \
                    wget \
                    file \
                    libssl-dev \
                    libgtk-3-dev \
                    libayatana-appindicator3-dev \
                    librsvg2-dev \
                    libsoup-3.0-dev

            - name: Install dependencies
              run: yarn

            - name: Delete old bundles (allow to fail)
              continue-on-error: true
              if: runner.os == 'Linux'
              run: |
                  rm -f ./src-tauri/target/release/bundle/deb/*_amd64.deb
                  rm -f ./src-tauri/target/release/bundle/appimage/*_amd64.AppImage

            - name: Build
              run: yarn build

            - name: Move bundles to output directory
              if: runner.os == 'Linux'
              run: |
                  mkdir -p ./out
                  cp ./src-tauri/target/release/bundle/deb/*_amd64.deb ./out/qplugged_amd64.deb
                  cp ./src-tauri/target/release/bundle/appimage/*_amd64.AppImage ./out/qplugged_amd64.AppImage

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build-${{ runner.os }}
                  path: |
                      out/*

    version-or-publish:
        needs: ["build"]
        runs-on: ubuntu-latest
        timeout-minutes: 65
        if: github.ref == 'refs/heads/main'
        permissions:
            contents: write
            pull-requests: write

        outputs:
            change: ${{ steps.covector.outputs.change }}
            commandRan: ${{ steps.covector.outputs.commandRan }}
            successfulPublish: ${{ steps.covector.outputs.successfulPublish }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # required for use of git history

            - uses: actions/setup-node@v3
              with:
                  node-version: 18
                  registry-url: https://registry.npmjs.org

            - name: git config
              run: |
                  git config --global user.name "${{ github.event.pusher.name }}"
                  git config --global user.email "${{ github.event.pusher.email }}"

            - name: Download Windows artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-Windows
                  path: ./out

            - name: Download Linux artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-Linux
                  path: ./out

            - name: covector version or publish (publish when no change files present)
              uses: jbolda/covector/packages/action@covector-v0.10
              id: covector
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  command: version-or-publish
                  createRelease: true

            - name: Create Pull Request
              id: cpr
              uses: peter-evans/create-pull-request@v5
              if: steps.covector.outputs.commandRan == 'version'
              with:
                  title: Publish New Versions
                  commit-message: publish new versions
                  labels: version updates
                  branch: release
                  body: ${{ steps.covector.outputs.change }}
